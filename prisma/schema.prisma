// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      String   // CONTRIBUTOR|MANAGER|OBSERVER|ADMIN
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  recordings Recording[]

  @@map("users")
}

model NameList {
  id         String   @id @default(cuid())
  title      String
  names      String   // JSON array of names
  pageNumber Int?
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Relations
  recordings Recording[]

  @@map("namelists")
}

model Recording {
  id          String   @id @default(cuid())
  filename    String
  originalName String?
  fileSize    Int
  duration    Int?     // in seconds
  mimeType    String
  status      String   @default("PENDING") // PENDING|APPROVED|REJECTED
  method      String   // LIVE|UPLOAD
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  nameListId String
  nameList   NameList @relation(fields: [nameListId], references: [id], onDelete: Cascade)

  // Exhibition queue
  exhibitionQueue ExhibitionQueue[]

  @@map("recordings")
}

model ExhibitionQueue {
  id        String   @id @default(cuid())
  position  Int
  playedAt  DateTime?
  createdAt DateTime @default(now())

  // Relations
  recordingId String
  recording   Recording @relation(fields: [recordingId], references: [id], onDelete: Cascade)

  @@unique([position])
  @@map("exhibition_queue")
}
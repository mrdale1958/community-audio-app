// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  name      String?
  role      String   @default("CONTRIBUTOR") // CONTRIBUTOR|MANAGER|OBSERVER|ADMIN|GALLERIST
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  recordings Recording[]
  exhibitions Exhibition[] @relation("ExhibitionGallerist")
  createdNameLists NameList[] @relation("NameListCreator")

  @@map("users")
}

model NameList {
  id         String   @id @default(cuid())
  title      String
  names      String   // JSON array of names
  pageNumber Int
  seriesId   String?  // Optional series/collection identifier
  createdBy  String?  // User who created this name list
  description String? // Description of this name list
  totalPages Int?     // Total pages in the series (for import metadata)
  namesCount Int?     // Number of names in this page (for performance)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  recordings Recording[]
  creator    User?    @relation("NameListCreator", fields: [createdBy], references: [id])

  @@map("namelists")
}

model Recording {
  id                String   @id @default(cuid())
  filename          String
  originalFilename  String
  filesize          Int
  mimetype          String
  fileHash          String?  // SHA-256 hash for integrity checking
  isCorrupted       Boolean  @default(false)
  lastQualityCheck  DateTime?
  duration          Float?   // duration in seconds
  status            String   @default("PENDING") // PENDING|APPROVED|REJECTED
  method            String   // LIVE|UPLOAD
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  nameListId String
  nameList   NameList @relation(fields: [nameListId], references: [id], onDelete: Cascade)

  exhibitionQueueItems ExhibitionQueueItem[]

  @@map("recordings")
}

model Exhibition {
  id              String    @id @default(cuid())
  title           String
  description     String?
  startDate       DateTime
  endDate         DateTime
  isActive        Boolean   @default(false)
  psaFrequency    Int       @default(50) // Insert PSA every N recordings
  galleryHours    String    // JSON: [{ day: 0-6, open: "09:00", close: "17:00" }]
  settings        String?   // JSON for additional exhibition settings
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  galleristId String
  gallerist   User   @relation("ExhibitionGallerist", fields: [galleristId], references: [id])

  psaFiles     ExhibitionPSA[]
  queue        ExhibitionQueueItem[]
  playbackLogs ExhibitionPlaybackLog[]

  @@map("exhibitions")
}

model ExhibitionPSA {
  id           String @id @default(cuid())
  filename     String
  title        String
  filesize     Int
  duration     Float? // duration in seconds
  isActive     Boolean @default(true)
  createdAt    DateTime @default(now())

  exhibitionId String
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id], onDelete: Cascade)

  @@map("exhibition_psas")
}

model ExhibitionQueueItem {
  id           String   @id @default(cuid())
  position     Int      // Current position in queue
  hasPlayed    Boolean  @default(false)
  playedAt     DateTime?
  queueCycle   Int      @default(1) // Which cycle through all recordings
  createdAt    DateTime @default(now())

  exhibitionId String
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id], onDelete: Cascade)
  recordingId  String
  recording    Recording  @relation(fields: [recordingId], references: [id], onDelete: Cascade)

  @@unique([exhibitionId, recordingId, queueCycle])
  @@map("exhibition_queue")
}

model ExhibitionPlaybackLog {
  id         String   @id @default(cuid())
  itemType   String   // RECORDING|PSA
  itemId     String   // recordingId or psaId
  playedAt   DateTime @default(now())
  duration   Float?   // actual play duration
  wasSkipped Boolean  @default(false)

  exhibitionId String
  exhibition   Exhibition @relation(fields: [exhibitionId], references: [id], onDelete: Cascade)

  @@map("exhibition_playback_logs")
}